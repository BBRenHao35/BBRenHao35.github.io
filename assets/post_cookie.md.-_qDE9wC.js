import{_ as e,o as t,c as o,R as i}from"./chunks/framework.UjU5Kp2a.js";const a="/assets/cookie.etVvmA5p.png",_=JSON.parse('{"title":"cookie","description":"","frontmatter":{},"headers":[],"relativePath":"post/cookie.md","filePath":"post/cookie.md","lastUpdated":1730650909000}'),s={name:"post/cookie.md"},c=i('<h1 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">建立時間：2024/07/25</p><p>Cookie 簡介</p></div><h2 id="cookie-簡介" tabindex="-1">📌 cookie 簡介 <a class="header-anchor" href="#cookie-簡介" aria-label="Permalink to &quot;:pushpin: cookie 簡介&quot;">​</a></h2><ul><li>網站自動登入(記住帳密)、記住使用者行為或偏好(廣告推薦)</li><li>登入會員 =&gt; 透過 cookie 紀錄之前輸入帳號密碼 =&gt; 不用每次重新輸入</li><li>cookie 設定資料 =&gt; 只儲存在 Client 端電腦</li></ul><h2 id="browser-f12-application-cookies" tabindex="-1">📌 Browser =&gt; F12 =&gt; Application =&gt; Cookies <a class="header-anchor" href="#browser-f12-application-cookies" aria-label="Permalink to &quot;:pushpin: Browser =&gt; F12 =&gt; Application =&gt; Cookies&quot;">​</a></h2><p><img src="'+a+'" alt="pgadmin"></p><h2 id="httponly" tabindex="-1">📌 HttpOnly <a class="header-anchor" href="#httponly" aria-label="Permalink to &quot;:pushpin: HttpOnly&quot;">​</a></h2><ul><li>表示 cookie 只能通過 Http Request(GET、POST) 訪問，無法透過 JavaScript 取得 User cookie 資料。</li></ul><div class="language-script vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">script</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;script&gt;(document.cookie)&lt;/script&gt;</span></span></code></pre></div><ul><li>防 XSS (跨站腳本攻擊) 攻擊者在網站前端塞入惡意 JavaScript 程式，User 在操作時，攻擊者透過 document.cookie 竊取 User 的 cookie 資料。</li></ul><h2 id="secure" tabindex="-1">📌 Secure <a class="header-anchor" href="#secure" aria-label="Permalink to &quot;:pushpin: Secure&quot;">​</a></h2><ul><li>表示 cookie 只能通過 https 發送，保護 cookie 只能在 https 傳遞。</li><li>假設設定 <a href="http://test.com" target="_blank" rel="noreferrer">http://test.com</a> 的 cookie 時，<a href="https://test.com" target="_blank" rel="noreferrer">https://test.com</a> 也能看到同樣的 cookie，但如果有設定 Secure，則 http 看不同該 cookie。</li></ul><h2 id="samesite" tabindex="-1">📌 SameSite <a class="header-anchor" href="#samesite" aria-label="Permalink to &quot;:pushpin: SameSite&quot;">​</a></h2><ul><li>防 CSRF(跨站請求偽造攻擊) User 登入銀行 Web =&gt; 攻擊者使用 User 身分 =&gt; 惡意操作銀行轉帳</li><li>User 登入後會得到一個代表 User 身分驗證的 cookie =&gt; User 操作時，開啟另一個分頁(攻擊者惡意網站) =&gt; 惡意網站發起 CSRF 攻擊(使用User已登入的可信銀行網站，去發送轉帳請求)，因為是使用 User 身分驗證的合法 cookie，會被視為有效的身分驗證。</li><li>使用三個值來防止 CSRF 攻擊 Strict、Lax、None： <ul><li>Strict 最嚴格，只在同一個 Web 時才發送 cookie，其他跨站 Request 都不會發送cookie。</li><li>Lax 中等，允許 GET Request 發送 cookie，但阻止 POST 發送 cookie。</li><li>None 寬鬆，允許跨站發送 cookie，但必須與 Secure(僅https發送) 屬性一起使用。</li></ul></li></ul>',14),l=[c];function r(p,n,h,k,u,d){return t(),o("div",null,l)}const g=e(s,[["render",r]]);export{_ as __pageData,g as default};
